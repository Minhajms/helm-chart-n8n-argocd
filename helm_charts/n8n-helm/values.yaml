# helm_charts/n8n-helm/values.yaml

# Default helm values for n8n.
# Default values within the n8n application can be found under https://github.com/n8n-io/n8n/blob/master/packages/cli/config/index.ts
n8n:
  encryption_key: # n8n creates a random encryption key automatically on the first launch and saves it in the ~/.n8n folder. That key is used to encrypt the credentials before they get saved to the database.

defaults:

config:
  executions:
    pruneData: "true" # prune executions by default
    pruneDataMaxAge: 3760 # Per default we store 1 year of history

  # This section configures the database connection for n8n
  # Use environment variables for database connection instead of secret section
  database:
    type: mysqldb
    mysqldb:
      host: mysql-for-n8n # This should match your MySQL service name
      database: "n8n_database"
      port: 3306
      user: "n8nuser"

database:
  type: mysqldb
  tablePrefix: # Prefix for table names - default: ''
  mysqldb:
    host: mysql-for-n8n # Point to your MySQL service name
    database: "n8n_database"
    port: 3306
    user: "n8nuser"

credentials:
  overwrite:
    data: # Overwrites for credentials - default: "{}"
    endpoint: # Fetch credentials from API - default: ''

executions:
  process: own
  timeout: -1
  maxTimeout: 3600
  saveDataOnError: all
  saveDataOnSuccess: all
  saveDataManualExecutions: false
  pruneData: "true"
  pruneDataMaxAge: 3760
  pruneDataTimeout: 3600

generic:
  timezone: Asia/Kolkata
path: /
host: localhost
port: 5678
listen_address: 0.0.0.0
protocol: http
ssl_key:
ssl_cert:

security:
  excludeEndpoints:
  basicAuth:
    active: false
    user:
    password:
    hash: false
  jwtAuth:
    active: false
    jwtHeader:
    jwtHeaderValuePrefix:
    jwksUri:
    jwtIssuer:
    jwtNamespace:
    jwtAllowedTenantKey:
    jwtAllowedTenant:

endpoints:
  rest: rest
  webhook: webhook
  webhookTest: webhook-test
  webhookWaiting: webhook-waiting

externalHookFiles:
nodes:
  exclude: "[]"
  errorTriggerType: n8n-nodes-base.errorTriggerType

# Set additional environment variables on the Deployment
extraEnv:
  # Database connection via environment variables (more reliable approach)
  DB_TYPE: "mysqldb"
  DB_MYSQLDB_HOST: "mysql-for-n8n"
  DB_MYSQLDB_PORT: "3306"
  DB_MYSQLDB_DATABASE: "n8n_database"
  DB_MYSQLDB_USER: "n8nuser"
  DB_MYSQLDB_PASSWORD: "dummy-n8n-db-password"
  
  # Crucial for n8n webhooks to work correctly when behind a reverse proxy/Cloudflare
  # You WILL need to uncomment and set this to your actual n8n domain
  # WEBHOOK_URL: "https://n8n.yourdomain.com/"

# Set additional environment from existing secrets
extraEnvSecrets: {}

##
##
##
##
## Common Kubernetes Config Settings
persistence:
  enabled: true
  type: dynamic
  storageClass: "standard"
  accessModes:
    - ReadWriteOnce
  size: 1Gi

replicaCount: 1

deploymentStrategy:
  type: "Recreate"

image:
  repository: n8nio/n8n
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}
podSecurityContext: {}
securityContext: {}
lifecycle: {}
command: []

livenessProbe:
  httpGet:
    path: /healthz
    port: http

readinessProbe:
  httpGet:
    path: /healthz
    port: http

initContainers: []

service:
  type: ClusterIP
  port: 80
  annotations: {}

ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  className: ""

workerResources: {}
webhookResources: {}

resources:
  requests:
    cpu: 600m
    memory: 1Gi
  limits:
    cpu: 1.5
    memory: 2Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations:
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"

affinity: {}

scaling:
  enabled: false
  worker:
    count: 2
    concurrency: 2
  webhook:
    enabled: false
    count: 1
  redis:
    host:
    password:

## Bitnami Redis configuration (disabled since we're using MySQL)
redis:
  enabled: false
  architecture: standalone
  master:
    persistence:
      enabled: true
      existingClaim: ""
      size: 2Gi
